import java.util.Properties;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;


import com.google.common.collect.Lists;
import com.twitter.hbc.ClientBuilder;
import com.twitter.hbc.core.Client;
import com.twitter.hbc.core.Constants;
import com.twitter.hbc.core.endpoint.StatusesFilterEndpoint;
import com.twitter.hbc.core.processor.StringDelimitedProcessor;
import com.twitter.hbc.httpclient.auth.Authentication;
import com.twitter.hbc.httpclient.auth.OAuth1;

import kafka.javaapi.producer.Producer;
import kafka.producer.ProducerConfig;
import kafka.producer.KeyedMessage;

public class TwitterStreamProducer{
    private static final String topic="hadoop";
	public static void PushTwittermessage(Producer<String, String> producer) throws InterruptedException {
      
	  String consumerKey="7j7RNGtlrVFsrdliDsfeO6eWl";
      String consumerSecret="kDXqjA2CKCbsjlHBKfvFilhVijfMkSZsDZMrwGW7tN85rI1MY6";
	  String token="3670247653-JlhLntyfhvf6pmyP3YZkyfyqm5mmg6Qmcj4Gm7Z";
	  String secret="SIBnW8HwMotdNOQUoTjp6pKV84UpvCSbTDcXBoDEir8X9";
	  
	  KeyedMessage<String, String> message=null;
	  BlockingQueue<String> queue = new LinkedBlockingQueue<String>(10000);
	  StatusesFilterEndpoint endpoint = new StatusesFilterEndpoint();
	  
	  //add some track terms
	  endpoint.trackTerms(Lists.newArrayList("twitterapi", "#rugby"));
	  Authentication auth = new OAuth1(consumerKey,consumerSecret,token,secret);
	  
	  //create a new BasicClient. By default gzip is enabled.
	  Client client = new ClientBuilder()
	     .hosts(Constants.STREAM_HOST)
		 .endpoint(endpoint)
		 .authentication(auth)
		 .processor(new StringDelimitedProcessor(queue))
		 .build();
		 
		//establish a connection
		client.connect();
		
		//do whatever needs to be done with messages
		for (int msgRead=0 ; msgRead<1000 ; msgRead++) {
		try {
			
		String msg = queue.take();
		System.out.println(msg);
		message = new KeyedMessage<String, String> (topic, queue.take());
		
		} catch (InterruptedException e) {
		    
			e.getStackTrace();
			
		}
		
		producer.send(message);
	}
	
	producer.close();
	client.stop();
}
		
	public static void main(String[] args) {
	//TODO autogenerated method stub
	
	Properties props = new Properties();
	
	props.put("metadata.broker.list","localhost:9092");
	props.put("serializer.class","kafka.serializer.StringEncoder");
	ProducerConfig producerConfig = new ProducerConfig(props);
	Producer<String, String>producer = new Producer<String, String>(producerConfig);
	
	try {
	
		TwitterStreamProducer.PushTwittermessage(producer);
	} catch(InterruptedException e) {
	 
		System.out.println(e);
	}
	
	}
	
}
